{"version":3,"sources":["logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weiValue","walletConnected","account","error","isLoaded","transactions","rewards","loadWeb3","web3","Web3","console","log","transactionURL","fetch","then","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","json","sent","ok","message","statusText","_this2","setState","result","stop","_x","apply","arguments","catch","element","tDate","tsDate","timeStamp","found","reward","address","from","amount","value","count","lastRewardTS","lastRewardDate","tokenName","contract","eth","Contract","ERC20","abi","methods","name","token","firstRewardTS","firstRewardDate","push","window","ethereum","enable","currentProvider","alert","getAccounts","accounts","utils","toWei","ts","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","_this3","_this$state","react_default","createElement","className","href","target","rel","id","role","style","width","scope","map","key","transaction","blockNumber","substring","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bd7c244.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","import React, { Component } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\nimport ERC20 from '../abis/ERC20.json'\nimport Web3 from 'web3'\n\nclass App extends Component {\n\n//this function runs when the page loads up before the render\n  async componentWillMount() {\n    // Load Web3\n    await this.loadWeb3()\n\n    let web3 = new Web3('https://speedy-nodes-nyc.moralis.io/c1005db9c7232a9cdd7c64c1/bsc/mainnet')\n    console.log('begin fetch')\n    // Chris account\n    //this.setState({account : \"0x22123679e2dd6205fB6C944d230DF5Fd9632D8ca\"})\n    // Fetch internal transactions\n\n    let transactionURL = \"https://api.bscscan.com/api?module=account&action=txlistinternal&address=\" + this.state.account + \"&startblock=0&endblock=99999999&sort=dsc&apikey=3EECSDZ78CUE9JQDRJXBMGT8HKAMVZYQGF\";\n    await fetch(transactionURL)\n        .then(async response => {\n            const data = await response.json();\n            console.log('response completed data=', data)\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response statusText\n                const error = (data && data.message) || response.statusText;\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n\n            this.setState({\n            transactions: data.result\n            })\n\n            console.log('data=', data)\n        })\n        .catch(error => {\n            this.setState({\n            isLoaded: true,\n            error\n            });\n\n            console.error('There was an error!', error);\n        });\n    console.log('end fetch')\n    //I need to loop through the transactions and convert the timestamp\n    //or I need to just sum up all the data I need and show results for each coin\n\n    for(var element in this.state.transactions) {\n      //console.log('element.blockNumber = ', this.state.transactions[element].blockNumber);\n      this.state.transactions[element].tDate = this.tsDate(this.state.transactions[element].timeStamp);\n      //console.log('element.timeStamp = ', this.state.transactions[element].timeStamp);\n      //console.log('element.tDate = ', this.state.transactions[element].tDate);\n      var found = false;\n      for(var reward in this.state.rewards) {\n        if(this.state.rewards[reward].address == this.state.transactions[element].from){\n          this.state.rewards[reward].amount += this.state.transactions[element].value/this.state.weiValue;\n          this.state.rewards[reward].count ++;\n          if (this.state.rewards[reward].lastRewardTS < this.state.transactions[element].timeStamp)\n          {\n            this.state.rewards[reward].lastRewardTS = this.state.transactions[element].timeStamp;\n            this.state.rewards[reward].lastRewardDate = this.state.transactions[element].tDate;\n          }\n          found = true;\n          break;\n        }\n      } \n      let tokenName;\n      if (!found)\n      {\n        try {\n          const contract = new web3.eth.Contract(ERC20.abi, this.state.transactions[element].from);\n          tokenName = await contract.methods.name().call();\n        } catch (error) {\n          tokenName = 'Unknown';\n          // expected output: ReferenceError: nonExistentFunction is not defined\n          // Note - error messages will vary depending on browser\n        }\n\n\n        var reward = {\n            'address': this.state.transactions[element].from,\n            'token': tokenName,\n            'count': 1,\n            'amount': this.state.transactions[element].value/this.state.weiValue,\n            'firstRewardTS': this.state.transactions[element].timeStamp,\n            'firstRewardDate': this.state.transactions[element].tDate,\n            'lastRewardTS': this.state.transactions[element].timeStamp,\n            'lastRewardDate': this.state.transactions[element].tDate,\n        }\n        this.state.rewards.push(reward);\n        console.log('Added Reward = ', this.state.transactions[element].from);\n      }             \n    }\n    console.log('end rewards = ',this.state.rewards);\n    //const contract = new web3.eth.Contract(ERC20.abi, '0x0952ddffde60786497c7ced1f49b4a14cf527f76');\n    //const tokenName = await contract.methods.name().call();\n    //console.log('tokenName = ', tokenName);\n    this.setState({isLoaded: true})\n\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n    const accounts = await window.web3.eth.getAccounts()\n\n    this.setState({\n      weiValue: window.web3.utils.toWei('1', 'ether'),\n      account: accounts[0]\n    })\n\n  }\n\n  //create state object\n  constructor(props) {\n    super(props)\n    this.state = {\n      weiValue: 1000000000000000000,\n      walletConnected: 'no',\n      account: '',\n      error: null,\n      isLoaded: false,\n      transactions: [],\n      rewards: []\n    }\n  }\n\n  tsDate(ts) {\n    var date = new Date(ts*1000);\n    return date.getFullYear() + \"-\" + (date.getMonth()+1) + \"-\" + date.getDate() + \" \" + date.getHours() + \":\" + date.getMinutes();\n  }\n  render() {\n\n    const { error, isLoaded, transactions } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://marketwarlords.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Ghostface Rewards Tracker\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>          \n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\" style={{ width: '1000px' }}>\n                <h5>Ghostface Rewards Tracker</h5>\n\n                <div className=\"row\">\n                  <div className=\"col-lg-12 mt-3\">\n\n                    <div className=\"card\">\n                      <div className=\"card-header\">\n                        <h5>Latest Rewards</h5>\n                      </div>\n                      <div className=\"card-body\">\n                        <table className=\"table\">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\">Token</th>\n                              <th scope=\"col\">Rewards</th>\n                              <th scope=\"col\">BNB Amount</th>\n                              <th scope=\"col\">Last Reward Date</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            { this.state.rewards.map((reward, key) => {\n                              return (\n                                <tr key={key} >\n                                  <th scope=\"row\">{reward.token}</th>\n                                  <td>{reward.count}</td>\n                                  <td>{reward.amount}</td>                                  \n                                  <td>{reward.lastRewardDate}</td>\n                                </tr>\n                              )\n                            }) }\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n\n\n\n                <div className=\"row\">\n                  <div className=\"col-lg-12 mt-3\">\n\n                    <div className=\"card\">\n                      <div className=\"card-header\">\n                        <h5>Latest Transactions</h5>\n                      </div>\n                      <div className=\"card-body\">\n                        <table className=\"table\">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\">Block</th>\n                              <th scope=\"col\">Date</th>\n                              <th scope=\"col\">From</th>\n                              <th scope=\"col\">BNB Amount</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            { this.state.transactions.map((transaction, key) => {\n                              return (\n                                <tr key={key} >\n                                  <th scope=\"row\">{transaction.blockNumber}</th>\n                                  <td>{transaction.tDate}</td>                                  \n                                  <td>{transaction.from.substring(0,50)}</td>\n                                  <td>{transaction.value/this.state.weiValue}</td>\n                                </tr>\n                              )\n                            }) }\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}